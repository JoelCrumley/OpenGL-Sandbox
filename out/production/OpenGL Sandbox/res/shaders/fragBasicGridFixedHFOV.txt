#version 400

uniform vec2 resolution;
uniform vec2 translation;
uniform float zoom;

out vec4 out_Color;

vec4 getColour(vec2 coordinate) {
    return vec4(mod(coordinate.x, 1.0), mod(coordinate.y, 1.0), 0.0, 1.0);
}

void main(void){

    // frag coord is pixel coord e.g. could be (1410, 241)
    // resolution is in pixels e.g. (1920, 1080)

    vec2 st = gl_FragCoord.xy/resolution.xy;

    float aspectRatio = resolution.x / resolution.y;
    // aspect ratio E (1, inf] => width > height
    // aspect ratio E (0, 1) => width < height

    st *= 2.0; // Mapping [0, 1] x [0, 1] space to [0, 2] x [0, 2] space.
    st -= vec2(1.0, 1.0); // Re-centering origin, moving to [-1, 1] x [-1, 1] space.

    st *= zoom; // Zoom in, zoom=2.0 would zoom out by 2x, zoom=0.5 would zoom in by 2x.
    // zoom = 2.0 case: [-1, 1] maps to [-2, 2] so objects get 2x smaller.

    st.y /= aspectRatio; // Fix distortion from mapping rectangle (screen) to square ( [0,1]x[0,1] )
    st += translation; // Move origin to point of interest.


	out_Color = getColour(st);

}