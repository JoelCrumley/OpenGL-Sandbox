#version 400

#define CROSSHAIR_WIDTH 1

uniform vec2 u_resolution;
uniform vec2 translation;
uniform float zoom;
uniform float limit;
uniform int iterations;
uniform int colourMode;
uniform bool showCrosshair;

out vec4 out_Color;

vec2 mandelbrot(vec2 point, vec2 c) {
    return vec2(point.x*point.x-point.y*point.y+c.x, 2.0*point.x*point.y+c.y);
}

float magSquared(vec2 point) {
    return point.x*point.x + point.y*point.y;
}

vec3 hsbToRgb(in vec3 c){
    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),
                             6.0)-3.0)-1.0,
                     0.0,
                     1.0 );
    rgb = rgb*rgb*(3.0-2.0*rgb);
    return c.z * mix(vec3(1.0), rgb, c.y);
}

void main(void){

    vec2 st = gl_FragCoord.xy/u_resolution.xy;
	// out_Color = vec4(st, 0.0, 1.0);

    st *= 2.0;
    st -= vec2(1.0, 1.0);
    st *= zoom;
    st += translation;

    vec2 point = vec2(st);

    int broke = -1;
    for (int i = 0; i < iterations; i++) {
    	if (magSquared(point) >= limit*limit) {
            broke = i;
            break;
        } else {
            point = mandelbrot(point, st);
        }
    }

    // our "convergence" amount to convert to a colour:
    //double metric = (limitDouble-double(broke)) / limitDouble;
    float metric = float(iterations-broke) / float(iterations);

    if (colourMode == 1) {
        gl_FragColor = vec4(0.0,0.0,broke == -1 ? 0.0 : metric, 1.0);
    } else if (colourMode == 2) {
        gl_FragColor = vec4(0.0,0.0,broke == -1 ? 0.0 : floor(10.0 * ( metric ) ) / 10.0, 1.0);
    } else if (colourMode == 3) {
        gl_FragColor = vec4(broke == -1 ? vec3(0.0,0.0,0.0) : hsbToRgb(vec3(1.0 - metric, 1.0, 1.0)), 1.0);
    } else {
        gl_FragColor = vec4(vec3(broke == -1 ? 0.0 : metric), 1.0);
    }

    if (showCrosshair) {
        int centerX = int(u_resolution.x/2.0);
        int centerY = int(u_resolution.y/2.0);
        if (((int(gl_FragCoord.x) >= centerX - CROSSHAIR_WIDTH) && (int(gl_FragCoord.x) <= centerX + CROSSHAIR_WIDTH) && (int(gl_FragCoord.y) >= centerY - CROSSHAIR_WIDTH) && (int(gl_FragCoord.y) <= centerY + CROSSHAIR_WIDTH))) {
            gl_FragColor = vec4(1.0 - gl_FragColor.x, 1.0 - gl_FragColor.y, 1.0 - gl_FragColor.z, 1.0);
        }
    }

}